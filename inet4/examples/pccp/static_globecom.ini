# 为了方便数据分析，作以下约定
# 1.host只使用app[0]
# 2.需要明确app使用sendFreq还是sendInterval，也即useFreq=true或false
[General]
network = inet.examples.pccp.smallNETwork
description = icn ad-hoc congestion control test

# 下面的参数是从IPvsColor/cluster/static.ini复制的

num-rngs = 10	# 随机数发生器个数
seed-set = ${runnumber}1${repetition}
sim-time-limit = 5s

smallNETwork.rngNum = 0	# smallNETwork的参数
smallNETwork.numHosts = 4 # 节点个数

**.constraintAreaMinX = -500m
**.constraintAreaMinY = -500m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 500m
**.constraintAreaMaxY = 500m
**.constraintAreaMaxZ = 0m

**.colorNet.multi = 0 # 不确定是什么参数

*.visualizer.mobilityVisualizer.displayVelocities = true
*.visualizer.mobilityVisualizer.displayMovementTrails = true

*.**.wlan[*].radio.antenna.numAntennas = 7
*.**.wlan[*].mac.qosStation = true
*.**.wlan[*].classifier.typename = "QosClassifier"
**.mac.hcf.originatorMacDataService.msduAggregationPolicy.typename = ""

*.**.wlan[*].opMode = "ac"
**.wlan[*].radio.bandName = "5 GHz"
**.wlan[*].bitrate = 433.333Mbps

**.wlan[*].mac.dcf.channelAccess.cwMin = 7
**.wlan[*].mac.cwMinBroadcast = 31
**.wlan[*].radio.transmitter.power = 12mW
**.wlan[*].radio.receiver.sensitivity = -85dBm
**.wlan[*].radio.receiver.snirThreshold = 4dB
**.wlan[*].radio.channelNumber = 4

# qosStation默认值是false, false时使用dcf，true使用**.hcf.edca.edcaf[*].pendingQueue
#**.wlan[*].mac.qosStation = false
#**.wlan[*].mac.dcf.channelAccess.pendingQueue.typename = PccpIndicatorQueue
**.mac.hcf.edca.edcaf[*].pendingQueue.typename = PccpIndicatorQueue
#**.mac.hcf.edca.edcaf[*].pendingQueue.fifo.packetCapacity = 100 # default(100), make it default

**.host[*].app[*].congestionControlEnabled = true	# default(true)
**.host[*].app[*].initialWindowSize = 1				# default(1)
**.host[*].app[*].maxRexmitLimit = 12				# default(12)

# 拥塞等级计算参数
**.pccpIndicator.wq = 0.02	# weight of the current queue length in the averaged queue length
**.pccpIndicator.g = 0.2	# weight of interest queue
**.pccpIndicator.CI_FREE = 0.05
**.pccpIndicator.CI_BUSY = 0.3
**.pccpIndicator.CI_CONG = 0.6
**.pccpIndicator.p0 = 0.5	# probability of CL=BUSY_1 when CI = CI_BUSY

# 拥塞窗口调整参数,参数具体含义见PccpAlg.cc
# n0收到连续标记为Congested数据包的个数 # 不再使用
**.host[*].app[*].k0 = 0.5
**.host[*].app[*].n0 = 100

# analog model
**.analogModel.ignorePartialInterference = true

**.color.colorType = "colorCluster" # 分簇使用"colorCluster",不分簇使用“colorNoCluster”

**.colorNet.hopLimit = 7
**.colorNet.getDelayTime = 0.0005
**.colorNet.dataDelayTime = 0.0011
**.colorNet.TC = 1
**.colorNet.flood = false
**.colorNet.unicast = false
**.colorNet.routeLifeTime = 2s

# clusterNode.cluster(SimpleCluster)
# 记录结果的路径与文件名
**.cluster.path = "/home/kilotron/data/rstFile/"
**.cluster.recordFile ="move_clusterRecord.txt"
**.cluster.iniFile = "move_iniRecord.txt"
**.cluster.collectTime  = 0.2s
**.cluster.interval = 0.05s
**.cluster.hello=0.1s
**.cluster.waitingTime=0.5s
**.cluster.retry = 4

# 上面的参数是从IPvsColor/cluster/static.ini复制的

# 节点初始位置
**.host[0].mobility.initialX = -300m 
**.host[0].mobility.initialY = 0m
**.host[1].mobility.initialX = -150m 
**.host[1].mobility.initialY = 0m
**.host[2].mobility.initialX = 0m
**.host[2].mobility.initialY = 0m
**.host[3].mobility.initialX = 100m
**.host[3].mobility.initialY = 0m

# 上面（从文件开头到此处）的配置在静态动态情况下都相同
**.host*.mobility.typename = "RandomWaypointMobility"
**.host*.mobility.initFromDisplayString = false
#静态
**.host*.mobility.speed = 0mps
# 动态
#**.host*.mobility.speed = uniform(10mps,17mps)
**.host*.mobility.waitTime = 1s

# 结果记录
**.rexmit:last.scalar-recording = true
**.dataRcvd:last.scalar-recording = true
**.getSent:last.scalar-recording = true
**.maxRexmit:last.scalar-recording = true
#**.dataQueueLength:max.scalar-recording = true
#**.pitLength:max.scalar-recording =true
#**.aveDataQueueLength:max.scalar-recording =true
#**.avePitLength:max.scalar-recording =true
#**.congestionIndex:max.scalar-recording =true
**.scalar-recording = false
**.vector-recording = false

[Config FourNodeDifferentCCExperiment]
# 3种拥塞控制算法：没有控制，使用data队列控制，使用data队列+请求表控制
# 在每种算法下分别请求10MB-50MB文件。先试一下50MB需要多长时间！！！！！！！！！
description = four node line topology different congestion control 
sim-time-limit = 500s
repeat = 40
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.1
**.color.colorType = "colorNoCluster"

**.host[*].app[*].congestionControlEnabled = true # 拥塞控制
**.host[*].app[*].initialWindowSize = 1				# default(1)
**.host[*].app[*].maxRexmitLimit = 12 # 最大重传次数

# 拥塞等级计算参数
**.pccpIndicator.algorithm = ${algo=0, 1, 2}
**.host[*].app[*].algoinfo = ${"PCCP", "CCS", "ECP"!algo}
**.pccpIndicator.wq = 0.02	# weight of the current queue length in the averaged queue length
**.pccpIndicator.g = 0.2	# weight of interest queue
**.pccpIndicator.CI_FREE = 0.05
**.pccpIndicator.CI_BUSY = 0.2
**.pccpIndicator.CI_CONG = 0.4

smallNETwork.numHosts = 4 # 节点个数
**.host[0].mobility.initialX = -300m 
**.host[0].mobility.initialY = 0m
**.host[1].mobility.initialX = -150m 
**.host[1].mobility.initialY = 0m
**.host[2].mobility.initialX = 0m
**.host[2].mobility.initialY = 0m
**.host[3].mobility.initialX = 150m
**.host[3].mobility.initialY = 0m

# provider: node[3]
**.host[3].numApps = 1
**.host[3].app[0].typename = "PccpProvider"
**.host[3].app[0].startTime = 1s

# consumer: node[0]
**.host[0].numApps = 1
**.host[0].app[0].typename = "PccpApp"
**.host[0].app[0].startTime = 3s # 开始发送请求的时间
**.host[0].app[0].destAddr = 3	# 向node[4]发送请求

**.host[0].app[0].useFreq = true # 使用发送间隔参数而不是发送频率参数
**.host[0].app[0].sendFreq = 1000
**.host[0].app[0].requestNum = ${size=10000..100000 step 10000} # 10MB-50MB
**.host[*].app[*].sizeinfo = ${10000..100000 step 10000!size}

[Config XTopoExperiment]
# 2种拥塞控制算法：使用data队列控制，使用data队列+请求表控制
description = x static topology
sim-time-limit = 150s
repeat = 10
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.1 #0.1
**.color.colorType = "colorNoCluster"

**.host[*].app[*].congestionControlEnabled = true # 拥塞控制
**.host[*].app[*].maxRexmitLimit = 12 # 最大重传次数
**.host[*].app[*].initialWindowSize = 1

# 拥塞等级计算参数
#**.pccpIndicator.algorithm = ${algo=0, 1, 2}
#**.host[*].app[*].algoinfo = ${"PCCP", "CCS", "ECP"!algo}
**.pccpIndicator.algorithm = ${algo="PCCP"}
**.host[*].app[*].algoinfo = ${algo}
**.pccpIndicator.wq = 0.02	# weight of the current queue length in the averaged queue length
#**.pccpIndicator.g = ${gamma=0..1 step 0.02}	# weight of interest queue${gamma=0..1 step 0.1}
#**.pccpIndicator.CI_FREE = ${free=0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.10, 0.10, 0.10, 0.10, 0.10, 0.10, 0.10, 0.10, 0.10, 0.10} # default: 0.05, 0.2, 0.4
#**.pccpIndicator.CI_BUSY = ${busy=0.10, 0.20, 0.30, 0.40, 0.45, 0.20, 0.30, 0.30, 0.40, 0.50, 0.15, 0.20, 0.30, 0.40, 0.50, 0.20, 0.20, 0.30, 0.40, 0.50!free}
#**.pccpIndicator.CI_CONG = ${cong=0.20, 0.40, 0.60, 0.80, 0.90, 0.50, 0.80, 0.50, 0.60, 0.70, 0.30, 0.40, 0.60, 0.80, 0.90, 0.60, 0.50, 0.40, 0.60, 0.70!free}
**.pccpIndicator.g = ${gamma=0.15..0.25 step 0.005}
**.pccpIndicator.CI_FREE = ${free=0.05}
**.pccpIndicator.CI_BUSY = ${busy=0.2}
**.pccpIndicator.CI_CONG = ${cong=0.4}
**.host[*].app[*].parainfo = " algo=" + ${algo} + " gamma=${gamma} free=${free} busy=${busy} cong=${cong} repeat=${repetition}"

smallNETwork.numHosts = 6 # 节点个数
**.host[0].mobility.initialX = -300m 
**.host[0].mobility.initialY = 50m
**.host[1].mobility.initialX = -300m 
**.host[1].mobility.initialY = -50m
**.host[2].mobility.initialX = -150m
**.host[2].mobility.initialY = 0m
**.host[3].mobility.initialX = 0m
**.host[3].mobility.initialY = 0m
**.host[4].mobility.initialX = 150m
**.host[4].mobility.initialY = 50m
**.host[5].mobility.initialX = 150m
**.host[5].mobility.initialY = -50m

# provider: node[4],node[5]
**.host[4].numApps = 1 # ApplicationLayerNodeBase的参数
**.host[4].app[0].typename = "PccpProvider"
**.host[4].app[0].startTime = 1s
**.host[4].app[0].pktNum = 100000

**.host[5].numApps = 1
**.host[5].app[0].typename = "PccpProvider"
**.host[5].app[0].startTime = 1s
**.host[5].app[0].pktNum = 100000

# consumer: node[0],node[1]
**.host[0].numApps = 1
**.host[0].app[*].typename = "PccpBurstApp"
**.host[0].app[*].startTime = 3s # 开始发送请求的时间
**.host[0].app[*].destAddr = 4	# 向node[4]发送请求
**.host[0].app[*].useFreq = true # 使用发送间隔参数而不是发送频率参数
**.host[0].app[*].sendFreq = 1000
**.host[0].app[*].requestNum = 100000

**.host[1].numApps = 1
**.host[1].app[*].typename = "PccpBurstApp"
**.host[1].app[*].startTime = 3.001s
**.host[1].app[*].destAddr = 5	# 向node[5]发送请求
**.host[1].app[*].useFreq = true
**.host[1].app[*].sendFreq = 1000
**.host[1].app[*].requestNum = 100000
