# 为了方便数据分析，作以下约定
# 1.host只使用app[0]
# 2.需要明确app使用sendFreq还是sendInterval，也即useFreq=true或false
[General]
network = inet.examples.pccp.smallNETwork
description = icn ad-hoc congestion control test

# 下面的参数是从IPvsColor/cluster/static.ini复制的

num-rngs = 10	# 随机数发生器个数
sim-time-limit = 5s

smallNETwork.rngNum = 0	# smallNETwork的参数
smallNETwork.numHosts = 4 # 节点个数

**.constraintAreaMinX = -500m
**.constraintAreaMinY = -500m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 500m
**.constraintAreaMaxY = 500m
**.constraintAreaMaxZ = 0m

**.colorNet.multi = 0 # 不确定是什么参数

*.visualizer.mobilityVisualizer.displayVelocities = true
*.visualizer.mobilityVisualizer.displayMovementTrails = true

*.**.wlan[*].radio.antenna.numAntennas = 7
*.**.wlan[*].mac.qosStation = true
*.**.wlan[*].classifier.typename = "QosClassifier"
**.mac.hcf.originatorMacDataService.msduAggregationPolicy.typename = ""

*.**.wlan[*].opMode = "ac"
**.wlan[*].radio.bandName = "5 GHz"
**.wlan[*].bitrate = 433.333Mbps

**.wlan[*].mac.dcf.channelAccess.cwMin = 7
**.wlan[*].mac.cwMinBroadcast = 31
**.wlan[*].radio.transmitter.power = 12mW
**.wlan[*].radio.receiver.sensitivity = -85dBm
**.wlan[*].radio.receiver.snirThreshold = 4dB
**.wlan[*].radio.channelNumber = 4

# qosStation默认值是false, false时使用dcf，true使用**.hcf.edca.edcaf[*].pendingQueue
#**.wlan[*].mac.qosStation = false
#**.wlan[*].mac.dcf.channelAccess.pendingQueue.typename = PccpIndicatorQueue
**.mac.hcf.edca.edcaf[*].pendingQueue.typename = PccpIndicatorQueue
#**.mac.hcf.edca.edcaf[*].pendingQueue.fifo.packetCapacity = 100 # default(100), make it default

**.host[*].app[*].congestionControlEnabled = true	# default(true)
**.host[*].app[*].initialWindowSize = 1				# default(1)
**.host[*].app[*].maxRexmitLimit = 12				# default(12)

# 拥塞等级计算参数
**.pccpIndicator.wq = 0.02	# weight of the current queue length in the averaged queue length
**.pccpIndicator.g = 0.2	# weight of interest queue
**.pccpIndicator.CI_FREE = 0.05
**.pccpIndicator.CI_BUSY = 0.3
**.pccpIndicator.CI_CONG = 0.6
**.pccpIndicator.p0 = 0.5	# probability of CL=BUSY_1 when CI = CI_BUSY

# 拥塞窗口调整参数,参数具体含义见PccpAlg.cc
# n0收到连续标记为Congested数据包的个数 # 不再使用
**.host[*].app[*].k0 = 0.5
**.host[*].app[*].n0 = 100

# analog model
**.analogModel.ignorePartialInterference = true

**.color.colorType = "colorCluster" # 分簇使用"colorCluster",不分簇使用“colorNoCluster”

**.colorNet.hopLimit = 7
**.colorNet.getDelayTime = 0.0005
**.colorNet.dataDelayTime = 0.0011
**.colorNet.TC = 1
**.colorNet.flood = false
**.colorNet.unicast = false
**.colorNet.routeLifeTime = 2s

# clusterNode.cluster(SimpleCluster)
# 记录结果的路径与文件名
**.cluster.path = "/home/kilotron/data/rstFile/"
**.cluster.recordFile ="move_clusterRecord.txt"
**.cluster.iniFile = "move_iniRecord.txt"
**.cluster.collectTime  = 0.2s
**.cluster.interval = 0.05s
**.cluster.hello=0.1s
**.cluster.waitingTime=0.5s
**.cluster.retry = 4

# 上面的参数是从IPvsColor/cluster/static.ini复制的

# 节点初始位置
**.host[0].mobility.initialX = -300m 
**.host[0].mobility.initialY = 0m
**.host[1].mobility.initialX = -150m 
**.host[1].mobility.initialY = 0m
**.host[2].mobility.initialX = 0m
**.host[2].mobility.initialY = 0m
**.host[3].mobility.initialX = 100m
**.host[3].mobility.initialY = 0m

# 上面（从文件开头到此处）的配置在静态动态情况下都相同
**.host*.mobility.typename = "RandomWaypointMobility"
**.host*.mobility.initFromDisplayString = false
#静态
**.host*.mobility.speed = 0mps
# 动态
#**.host*.mobility.speed = uniform(10mps,17mps)
**.host*.mobility.waitTime = 1s

# 结果记录
**.rexmit:last.scalar-recording = true
**.dataRcvd:last.scalar-recording = true
**.getSent:last.scalar-recording = true
**.maxRexmit:last.scalar-recording = true
# 丢包记录
**.packetDrop:count.scalar-recording = true
**.packetDropIncorrectlyReceived:count.scalar-recording = true
**.packetDropNotAddressedToUs:count.scalar-recording = true
**.packetDropQueueOverflow:count.scalar-recording = true
**.packetDropRetryLimitReached:count.scalar-recording = true
#**.dataQueueLength:max.scalar-recording = true
#**.pitLength:max.scalar-recording =true
#**.aveDataQueueLength:max.scalar-recording =true
#**.avePitLength:max.scalar-recording =true
#**.congestionIndex:max.scalar-recording =true
**.scalar-recording = false

**.rto:vector.vector-recording = true
**.srtt:vector.vector-recording = true
**.rttvar:vector.vector-recording = true
**.window:vector.vector-recording = true
**.effectiveWindow:vector.vector-recording = true
**.rexmit:vector.vector-recording = true
**.dataRcvd:vector.vector-recording = true
**.getSent:vector.vector-recording = true
**.dataQueueLength:vector.vector-recording = true
**.pitLength:vector.vector-recording = true
**.aveDataQueueLength:vector.vector-recording = true
**.avePitLength:vector.vector-recording = true
**.congestionIndex:vector.vector-recording = true
**.congestionLevel:vector.vector-recording = true
**.timeout:vector.vector-recording = true
**.maxRexmit:vector.vector-recording = true
**.vector-recording = false

[Config for_debug_use_3_node]
description = debug 3 node
sim-time-limit = 60s
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.1

# provider: node[2]
**.host[3].numApps = 1 # ApplicationLayerNodeBase的参数
**.host[3].app[0].typename = "PccpProvider"
**.host[3].app[0].startTime = 1s

# consumer: node[0]
**.host[0].numApps = 1
**.host[0].app[0].typename = "PccpApp"
**.host[0].app[0].RSTpath = "/home/kilotron/data/simu/"
**.host[0].app[0].startTime = 3s # 开始发送请求的时间
**.host[0].app[0].destAddr = 3	# 向node[2]发送请求
**.host[0].app[0].sendInterval = ${appSendInterval=0.1,0.2}
**.host[0].app[0].requestNum = 200

[Config FourByFourExperiment]
# 3种拥塞控制算法：没有控制，使用data队列控制，使用data队列+请求表控制
# 在每种算法下不同的consumer个数
# 重复10次，总共3*4*10=120次
description = 4 x 4 topology
sim-time-limit = 800s
repeat = 10
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.0005 #0.1
**.color.colorType = "colorNoCluster"

**.host[*].app[*].congestionControlEnabled = ${ccenabled=false, true, true} # 拥塞控制
**.host[*].app[*].maxRexmitLimit = 12 # 最大重传次数
**.host[*].app[*].initialWindowSize = 10

# 拥塞等级计算参数
**.pccpIndicator.dataQueueOnly = ${ccdataqueueonly=false, true, false!ccenabled}
**.pccpIndicator.wq = 0.02	# weight of the current queue length in the averaged queue length
**.pccpIndicator.g = 0.2	# weight of interest queue
**.pccpIndicator.CI_FREE = 0.05
**.pccpIndicator.CI_BUSY = 0.2
**.pccpIndicator.CI_CONG = 0.4

smallNETwork.numHosts = 16 # 节点个数
**.host[0].mobility.initialX = -120m 
**.host[0].mobility.initialY = 240m
**.host[1].mobility.initialX = 0m 
**.host[1].mobility.initialY = 240m
**.host[2].mobility.initialX = 120m
**.host[2].mobility.initialY = 240m
**.host[3].mobility.initialX = 240m
**.host[3].mobility.initialY = 240m
**.host[4].mobility.initialX = -120m
**.host[4].mobility.initialY = 120m
**.host[5].mobility.initialX = 0m
**.host[5].mobility.initialY = 120m
**.host[6].mobility.initialX = 120m
**.host[6].mobility.initialY = 120m
**.host[7].mobility.initialX = 240m
**.host[7].mobility.initialY = 120m
**.host[8].mobility.initialX = -120m
**.host[8].mobility.initialY = 0m
**.host[9].mobility.initialX = 0m
**.host[9].mobility.initialY = 0m
**.host[10].mobility.initialX = 120m
**.host[10].mobility.initialY = 0m
**.host[11].mobility.initialX = 240m
**.host[11].mobility.initialY = 0m
**.host[12].mobility.initialX = -120m
**.host[12].mobility.initialY = -120m
**.host[13].mobility.initialX = 0m
**.host[13].mobility.initialY = -120m
**.host[14].mobility.initialX = 120m
**.host[14].mobility.initialY = -120m
**.host[15].mobility.initialX = 240m
**.host[15].mobility.initialY = -120m

# provider: node[0],node[1]
**.host[0].numApps = 1
**.host[0].app[0].typename = "PccpProvider"
**.host[0].app[0].startTime = 1s

**.host[1].numApps = 1
**.host[1].app[0].typename = "PccpProvider"
**.host[1].app[0].startTime = 1s

# consumer: node[12],node[13],node[14],node[15]
**.host[12].numApps = ${host12app=1, 1, 1, 1}
**.host[12].app[0].typename = "PccpApp"
**.host[12].app[0].startTime = 3s # 开始发送请求的时间
**.host[12].app[0].destAddr = 1	# 向node[1]发送请求
**.host[12].app[0].useFreq = true # 使用发送间隔参数而不是发送频率参数
**.host[12].app[0].sendFreq = 1000
**.host[12].app[0].requestNum = 30000

**.host[13].numApps = ${host13app=0, 1, 1, 1!host12app}
**.host[13].app[0].typename = "PccpApp"
**.host[13].app[0].startTime = 3s # 开始发送请求的时间
**.host[13].app[0].destAddr = 0	# 向node[0]发送请求
**.host[13].app[0].useFreq = true # 使用发送间隔参数而不是发送频率参数
**.host[13].app[0].sendFreq = 1000
**.host[13].app[0].requestNum = 30000

**.host[14].numApps = ${host14app=0, 0, 1, 1!host12app}
**.host[14].app[0].typename = "PccpApp"
**.host[14].app[0].startTime = 3s # 开始发送请求的时间
**.host[14].app[0].destAddr = 1	# 向node[1]发送请求
**.host[14].app[0].useFreq = true # 使用发送间隔参数而不是发送频率参数
**.host[14].app[0].sendFreq = 1000
**.host[14].app[0].requestNum = 30000

**.host[15].numApps = ${host15app=0, 0, 0, 1!host12app}
**.host[15].app[0].typename = "PccpApp"
**.host[15].app[0].startTime = 3s # 开始发送请求的时间
**.host[15].app[0].destAddr = 0	# 向node[0]发送请求
**.host[15].app[0].useFreq = true # 使用发送间隔参数而不是发送频率参数
**.host[15].app[0].sendFreq = 1000
**.host[15].app[0].requestNum = 30000

[Config XTopoExperiment]
# 3种拥塞控制算法：没有控制，使用data队列控制，使用data队列+请求表控制
# 在每种算法下分别请求20MB,1)节点0、1同时在3s开始请求；2)节点0在3s开始请求，节点1在13s开始请求;
# 重复10次，总共3*2*10=60次
description = x static topology
sim-time-limit = 500s
repeat = 1
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.0005 #0.1
**.color.colorType = "colorCluster"

#**.host[*].app[*].congestionControlEnabled = ${ccenabled=false, true, true} # 拥塞控制
**.host[*].app[*].congestionControlEnabled = ${ccenabled=true} # 拥塞控制
**.host[*].app[*].maxRexmitLimit = 12 # 最大重传次数
**.host[*].app[*].initialWindowSize = 1

# 拥塞等级计算参数
#**.pccpIndicator.dataQueueOnly = ${ccdataqueueonly=false, true, false!ccenabled}
**.pccpIndicator.dataQueueOnly = ${ccdataqueueonly=false!ccenabled}
**.pccpIndicator.wq = 0.02	# weight of the current queue length in the averaged queue length
**.pccpIndicator.g = 0.2	# weight of interest queue
**.pccpIndicator.CI_FREE = 0.05
**.pccpIndicator.CI_BUSY = 0.2
**.pccpIndicator.CI_CONG = 0.4

smallNETwork.numHosts = 6 # 节点个数
**.host[0].mobility.initialX = -300m 
**.host[0].mobility.initialY = 50m
**.host[1].mobility.initialX = -300m 
**.host[1].mobility.initialY = -50m
**.host[2].mobility.initialX = -150m
**.host[2].mobility.initialY = 0m
**.host[3].mobility.initialX = 0m
**.host[3].mobility.initialY = 0m
**.host[4].mobility.initialX = 150m
**.host[4].mobility.initialY = 50m
**.host[5].mobility.initialX = 150m
**.host[5].mobility.initialY = -50m

# provider: node[4],node[5]
**.host[4].numApps = 1 # ApplicationLayerNodeBase的参数
**.host[4].app[0].typename = "PccpProvider"
**.host[4].app[0].startTime = 1s

**.host[5].numApps = 1
**.host[5].app[0].typename = "PccpProvider"
**.host[5].app[0].startTime = 1s

# consumer: node[0],node[1]
**.host[0].numApps = 1
**.host[0].app[0].typename = "PccpApp"
**.host[0].app[0].startTime = 3s # 开始发送请求的时间
**.host[0].app[0].destAddr = 4	# 向node[4]发送请求
**.host[0].app[0].useFreq = true # 使用发送间隔参数而不是发送频率参数
**.host[0].app[0].sendFreq = 1000
**.host[0].app[0].requestNum = 30000

**.host[1].numApps = 1
**.host[1].app[0].typename = "PccpApp"
#**.host[1].app[0].startTime = ${host1starttime=3, 33}s # 开始发送请求的时间
**.host[1].app[0].startTime = ${host1starttime=3.05, 33}s
**.host[1].app[0].destAddr = 5	# 向node[5]发送请求
**.host[1].app[0].useFreq = true
**.host[1].app[0].sendFreq = 1000
**.host[1].app[0].requestNum = 30000


[Config Xstatic]
# 3种拥塞控制算法：没有控制，使用data队列控制，使用data队列+请求表控制
# 在每种算法下分别请求20MB,1)节点0、1同时在3s开始请求；2)节点0在3s开始请求，节点1在13s开始请求;
# 重复10次，总共3*2*10=60次
description = x static topology
sim-time-limit = 100s
repeat = 1
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.0005 #0.1
**.color.colorType = "colorNoCluster"

**.host[*].app[*].congestionControlEnabled = false # 拥塞控制
**.host[*].app[*].maxRexmitLimit = 0 # 最大重传次数
**.host[*].app[*].initialWindowSize = 10

# 拥塞等级计算参数
**.pccpIndicator.dataQueueOnly = false
**.pccpIndicator.wq = 0.02	# weight of the current queue length in the averaged queue length
**.pccpIndicator.g = 0.2	# weight of interest queue
**.pccpIndicator.CI_FREE = 0.05
**.pccpIndicator.CI_BUSY = 0.2
**.pccpIndicator.CI_CONG = 0.4

smallNETwork.numHosts = 6 # 节点个数
**.host[0].mobility.initialX = -300m 
**.host[0].mobility.initialY = 50m
**.host[1].mobility.initialX = -300m 
**.host[1].mobility.initialY = -50m
**.host[2].mobility.initialX = -150m
**.host[2].mobility.initialY = 0m
**.host[3].mobility.initialX = 0m
**.host[3].mobility.initialY = 0m
**.host[4].mobility.initialX = 150m
**.host[4].mobility.initialY = 50m
**.host[5].mobility.initialX = 150m
**.host[5].mobility.initialY = -50m

# provider: node[4],node[5]
**.host[4].numApps = 1 # ApplicationLayerNodeBase的参数
**.host[4].app[0].typename = "PccpProvider"
**.host[4].app[0].startTime = 1s

#**.host[5].numApps = 1
#**.host[5].app[0].typename = "PccpProvider"
#**.host[5].app[0].startTime = 1s

# consumer: node[0],node[1]
**.host[0].numApps = 1
**.host[0].app[0].typename = "PccpApp"
**.host[0].app[0].startTime = 5s # 开始发送请求的时间
**.host[0].app[0].destAddr = 4	# 向node[4]发送请求
**.host[0].app[0].useFreq = true # 使用发送间隔参数而不是发送频率参数
**.host[0].app[0].sendFreq = 1000
**.host[0].app[0].requestNum = 10000

**.host[1].numApps = 1
**.host[1].app[0].typename = "PccpApp"
**.host[1].app[0].startTime = 3s # 开始发送请求的时间
**.host[1].app[0].destAddr = 5	# 向node[5]发送请求
**.host[1].app[0].useFreq = true
**.host[1].app[0].sendFreq = 1000
**.host[1].app[0].requestNum = 20000


[Config FourNodeDifferentCCExperiment]
# 3种拥塞控制算法：没有控制，使用data队列控制，使用data队列+请求表控制
# 在每种算法下分别请求10MB-50MB文件。先试一下50MB需要多长时间！！！！！！！！！
description = four node line topology different congestion control 
sim-time-limit = 500s
repeat = 10
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.1
**.color.colorType = "colorNoCluster"

**.host[*].app[*].congestionControlEnabled = ${ccenabled=false, true, true} # 拥塞控制
**.host[*].app[*].initialWindowSize = 1				# default(1)
**.host[*].app[*].maxRexmitLimit = 12 # 最大重传次数

# 拥塞等级计算参数
**.pccpIndicator.dataQueueOnly = ${ccdataqueueonly=false, true, false!ccenabled}
**.pccpIndicator.wq = 0.02	# weight of the current queue length in the averaged queue length
**.pccpIndicator.g = 0.2	# weight of interest queue
**.pccpIndicator.CI_FREE = 0.05
**.pccpIndicator.CI_BUSY = 0.2
**.pccpIndicator.CI_CONG = 0.4

smallNETwork.numHosts = 4 # 节点个数
**.host[0].mobility.initialX = -300m 
**.host[0].mobility.initialY = 0m
**.host[1].mobility.initialX = -150m 
**.host[1].mobility.initialY = 0m
**.host[2].mobility.initialX = 0m
**.host[2].mobility.initialY = 0m
**.host[3].mobility.initialX = 150m
**.host[3].mobility.initialY = 0m

# provider: node[3]
**.host[3].numApps = 1
**.host[3].app[0].typename = "PccpProvider"
**.host[3].app[0].startTime = 1s

# consumer: node[0]
**.host[0].numApps = 1
**.host[0].app[0].typename = "PccpApp"
**.host[0].app[0].startTime = 3s # 开始发送请求的时间
**.host[0].app[0].destAddr = 3	# 向node[4]发送请求

**.host[0].app[0].useFreq = true # 使用发送间隔参数而不是发送频率参数
**.host[0].app[0].sendFreq = 1000
**.host[0].app[0].requestNum = ${size=10000..50000 step 10000} # 10MB-50MB

[Config FourNodeParameterExperiment]
description = four node line topology parameter tuning 
sim-time-limit = 500s
repeat = 10
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.1
**.color.colorType = "colorNoCluster"

**.host[*].app[*].congestionControlEnabled = true # 拥塞控制
**.host[*].app[*].initialWindowSize = 1				# default(1)
**.host[*].app[*].maxRexmitLimit = 12 # 最大重传次数

# 拥塞等级计算参数
**.pccpIndicator.dataQueueOnly = false
**.pccpIndicator.wq = 0.02	# weight of the current queue length in the averaged queue length
**.pccpIndicator.g = 0.2	# weight of interest queue
#**.pccpIndicator.CI_FREE = ${free=0.01..0.1 step 0.01}
#**.pccpIndicator.CI_BUSY = ${busy=0.04..0.4 step 0.04!free}
#**.pccpIndicator.CI_CONG = ${cong=0.08..0.8 step 0.08!free}
**.pccpIndicator.CI_FREE = ${free=0.11..0.15 step 0.01}
**.pccpIndicator.CI_BUSY = ${busy=0.44..0.6 step 0.04!free}
**.pccpIndicator.CI_CONG = ${cong=0.82..0.9 step 0.02!free}

smallNETwork.numHosts = 4 # 节点个数
**.host[0].mobility.initialX = -300m 
**.host[0].mobility.initialY = 0m
**.host[1].mobility.initialX = -150m 
**.host[1].mobility.initialY = 0m
**.host[2].mobility.initialX = 0m
**.host[2].mobility.initialY = 0m
**.host[3].mobility.initialX = 150m
**.host[3].mobility.initialY = 0m

# provider: node[3]
**.host[3].numApps = 1
**.host[3].app[0].typename = "PccpProvider"
**.host[3].app[0].startTime = 1s

# consumer: node[0]
**.host[0].numApps = 1
**.host[0].app[0].typename = "PccpApp"
**.host[0].app[0].startTime = 3s # 开始发送请求的时间
**.host[0].app[0].destAddr = 3	# 向node[4]发送请求

**.host[0].app[0].useFreq = true # 使用发送间隔参数而不是发送频率参数
**.host[0].app[0].sendFreq = 1000
**.host[0].app[0].requestNum = 20000

[Config FourNode]
description = four node line topology 
sim-time-limit = 100s
repeat = 1
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.1
#**.color.colorType = "colorNoCluster"

**.host[*].app[*].congestionControlEnabled = true # 拥塞控制
**.host[*].app[*].initialWindowSize = 1				# default(1)
**.host[*].app[*].maxRexmitLimit = 12 # 最大重传次数

# 拥塞等级计算参数
**.pccpIndicator.wq = 0.02	# weight of the current queue length in the averaged queue length
**.pccpIndicator.g = 0.2	# weight of interest queue
**.pccpIndicator.CI_FREE = 0.05 #0.05
**.pccpIndicator.CI_BUSY = 0.2
**.pccpIndicator.CI_CONG = 0.4
**.pccpIndicator.p0 = 0.5	# probability of CL=BUSY_1 when CI = CI_BUSY

# 拥塞窗口调整参数,参数具体含义见PccpAlg.cc
# n0收到连续标记为Congested数据包的个数
**.host[*].app[*].k0 = 0.5
**.host[*].app[*].n0 = 100

smallNETwork.numHosts = 4 # 节点个数
**.host[0].mobility.initialX = -300m 
**.host[0].mobility.initialY = 0m
**.host[1].mobility.initialX = -150m 
**.host[1].mobility.initialY = 0m
**.host[2].mobility.initialX = 0m
**.host[2].mobility.initialY = 0m
**.host[3].mobility.initialX = 150m
**.host[3].mobility.initialY = 0m

# provider: node[3]
**.host[3].numApps = 1 # ApplicationLayerNodeBase的参数
**.host[3].app[0].typename = "PccpProvider"
**.host[3].app[0].startTime = 1s

# consumer: node[0]
**.host[0].numApps = 1
**.host[0].app[0].typename = "PccpApp"
**.host[0].app[0].startTime = 3s # 开始发送请求的时间
**.host[0].app[0].destAddr = 3	# 向node[4]发送请求

**.host[0].app[0].useFreq = true # 使用发送间隔参数而不是发送频率参数
**.host[0].app[0].sendFreq = 1000
**.host[0].app[0].requestNum = 10000

[Config TwoNodeDifferentLoadExperiment]
# 2个节点，节点0请求节点1的数据共10MB。关闭拥塞控制，关闭重传机制。在不同的请求频率下（单位request/s）
# [100, 200, ..., 1000, 2000, ..., 10000], 每个请求对应1个数据包，大小为1KB。最大吞吐量（单位MB/s)
# [0.1, 0.2, ..., 1, 2, ..., 10]。观察实际吞吐量、队列溢出数据包个数、未正确接收的数据包个数随请求频率的变化。
description = two node different load no congestion control
sim-time-limit = 500s
repeat = 10
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.1
**.host[*].app[*].congestionControlEnabled = false # 关闭拥塞控制
**.host[*].app[*].maxRexmitLimit = 0 # 关闭重传

# 2个节点，距离为100m（减少传输错误）
smallNETwork.numHosts = 2 
**.host[0].mobility.initialX = 0m 
**.host[0].mobility.initialY = 0m
**.host[1].mobility.initialX = 100m
**.host[1].mobility.initialY = 0m

# provider: node[1]
**.host[1].numApps = 1 # ApplicationLayerNodeBase的参数
**.host[1].app[0].typename = "PccpProvider"
**.host[1].app[0].startTime = 1s

# consumer: node[0]
**.host[0].numApps = 1
**.host[0].app[0].typename = "PccpApp"
**.host[0].app[0].startTime = 3s # 开始发送请求的时间
**.host[0].app[0].destAddr = 1	# 向node[1]发送请求
**.host[0].app[0].useFreq = true
#第一次
#**.host[0].app[0].sendFreq = ${appSendFreq=100,200,300,400,500,600,700,800,900,1000..10000 step 1000}
#第二次
**.host[0].app[0].sendFreq = ${appSendFreq=500..10000 step 500}
**.host[0].app[0].requestNum = 10000

[Config TwoNodeDifferentDistanceExperiment]
# 2个节点，节点0请求节点1的数据共10MB。关闭拥塞控制，关闭重传机制。在相同请求频率1000request/s，
# 每个请求对应1个数据包，大小为1KB，不同距离 [100..250 step 10](单位m)的条件下
# 观察实际吞吐量、队列溢出数据包个数、未正确接收的数据包个数随距离的变化。
description = two node different distance no congestion control
sim-time-limit = 500s
repeat = 10
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.1
**.host[*].app[*].congestionControlEnabled = false # 关闭拥塞控制
**.host[*].app[*].maxRexmitLimit = 0 # 关闭重传

# 2个节点
smallNETwork.numHosts = 2 
**.host[0].mobility.initialX = 0m 
**.host[0].mobility.initialY = 0m
**.host[1].mobility.initialX = ${distance=100..250 step 10}m
**.host[1].mobility.initialY = 0m

# provider: node[1]
**.host[1].numApps = 1 # ApplicationLayerNodeBase的参数
**.host[1].app[0].typename = "PccpProvider"
**.host[1].app[0].startTime = 1s

# consumer: node[0]
**.host[0].numApps = 1
**.host[0].app[0].typename = "PccpApp"
**.host[0].app[0].startTime = 3s # 开始发送请求的时间
**.host[0].app[0].destAddr = 1	# 向node[1]发送请求
**.host[0].app[0].useFreq = true
**.host[0].app[0].sendFreq = 1000
**.host[0].app[0].requestNum = 10000

[Config SixNodeDifferentHopExperiment]
# 6个节点，节点0分别请求节点1-5的数据，没个节点共10MB。关闭拥塞控制，关闭重传机制。在相同请求频率1000request/s，
# 每个请求对应1个数据包，大小为1KB，相邻节点相同距离150m的条件下
# 观察实际接收的数据包个数随跳数的变化。
description = six node different hop no congestion control
sim-time-limit = 150s
repeat = 10
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.1
**.color.colorType = "colorNoCluster" # 分簇使用"colorCluster",不分簇使用“colorNoCluster”
**.host[*].app[*].congestionControlEnabled = false # 关闭拥塞控制
**.host[*].app[*].maxRexmitLimit = 0 # 关闭重传

# 6个节点，相邻节点距离为150m
smallNETwork.numHosts = 6
**.host[0].mobility.initialX = -450m 
**.host[0].mobility.initialY = 0m
**.host[1].mobility.initialX = -300m
**.host[1].mobility.initialY = 0m
**.host[2].mobility.initialX = -150m
**.host[2].mobility.initialY = 0m
**.host[3].mobility.initialX = 0m
**.host[3].mobility.initialY = 0m
**.host[4].mobility.initialX = 150m
**.host[4].mobility.initialY = 0m
**.host[5].mobility.initialX = 300m
**.host[5].mobility.initialY = 0m

# provider: node[1-5]
**.host[1..5].numApps = 1 # ApplicationLayerNodeBase的参数
**.host[1..5].app[0].typename = "PccpProvider"
**.host[1..5].app[0].startTime = 1s

# consumer: node[0]
**.host[0].numApps = 1
**.host[0].app[0].typename = "PccpApp"
**.host[0].app[0].startTime = 3s # 开始发送请求的时间
**.host[0].app[0].destAddr = ${numHop=1..5 step 1}	# 分别向node[1-5]发送请求
**.host[0].app[0].useFreq = true
**.host[0].app[0].sendFreq = 1000
**.host[0].app[0].requestNum = 10000
