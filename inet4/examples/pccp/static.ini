[General]
network = inet.examples.pccp.smallNETwork
description = icn ad-hoc congestion control test

# 下面的参数是从IPvsColor/cluster/static.ini复制的

num-rngs = 10	# 随机数发生器个数
sim-time-limit = 5s

smallNETwork.rngNum = 0	# smallNETwork的参数
smallNETwork.numHosts = 4 # 节点个数

**.constraintAreaMinX = -500m
**.constraintAreaMinY = -500m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 500m
**.constraintAreaMaxY = 500m
**.constraintAreaMaxZ = 0m

**.colorNet.multi = 0 # 不确定是什么参数

*.visualizer.mobilityVisualizer.displayVelocities = true
*.visualizer.mobilityVisualizer.displayMovementTrails = true

*.**.wlan[*].radio.antenna.numAntennas = 7
*.**.wlan[*].mac.qosStation = true
*.**.wlan[*].classifier.typename = "QosClassifier"
**.mac.hcf.originatorMacDataService.msduAggregationPolicy.typename = ""

*.**.wlan[*].opMode = "ac"
**.wlan[*].radio.bandName = "5 GHz"
**.wlan[*].bitrate = 433.333Mbps

**.wlan[*].mac.dcf.channelAccess.cwMin = 7
**.wlan[*].mac.cwMinBroadcast = 31
**.wlan[*].radio.transmitter.power = 12mW
**.wlan[*].radio.receiver.sensitivity = -85dBm
**.wlan[*].radio.receiver.snirThreshold = 4dB
**.wlan[*].radio.channelNumber = 4

# analog model
**.analogModel.ignorePartialInterference = true

**.color.colorType = "colorCluster" # 不分簇使用“colorNoCluster”

**.colorNet.hopLimit = 7
**.colorNet.getDelayTime = 0.0005
**.colorNet.dataDelayTime = 0.0011
**.colorNet.TC = 1
**.colorNet.flood = false
**.colorNet.unicast = false
**.colorNet.routeLifeTime = 2s

# clusterNode.cluster(SimpleCluster)
# 记录结果的路径与文件名
**.cluster.path = "/home/kilotron/data/rstFile/"
**.cluster.recordFile ="move_clusterRecord.txt"
**.cluster.iniFile = "move_iniRecord.txt"
**.cluster.collectTime  = 0.2s
**.cluster.interval = 0.05s
**.cluster.hello=0.1s
**.cluster.waitingTime=0.5s
**.cluster.retry = 4

# 上面的参数是从IPvsColor/cluster/static.ini复制的

# 节点初始位置
#**.host[0].mobility.initialX = -400m 
#**.host[0].mobility.initialY = 0m
#**.host[1].mobility.initialX = -200m 
#**.host[1].mobility.initialY = 0m
#**.host[2].mobility.initialX = 0m
#**.host[2].mobility.initialY = 0m


**.host[0].mobility.initialX = -300m 
**.host[0].mobility.initialY = 0m
**.host[1].mobility.initialX = -150m 
**.host[1].mobility.initialY = 0m
**.host[2].mobility.initialX = 0m
**.host[2].mobility.initialY = 0m
**.host[3].mobility.initialX = 100m
**.host[3].mobility.initialY = 0m
#**.host[4].mobility.initialX = 250m
#**.host[4].mobility.initialY = 0m
#**.host[5].mobility.initialX = 400m
#**.host[5].mobility.initialY = 0m

# 上面（从文件开头到此处）的配置在静态动态情况下都相同
**.host*.mobility.typename = "RandomWaypointMobility"
**.host*.mobility.initFromDisplayString = false
#静态
**.host*.mobility.speed = 0mps
# 动态
#**.host*.mobility.speed = uniform(10mps,17mps)
**.host*.mobility.waitTime = 1s

# 结果记录
**.rexmit:last.scalar-recording = true
**.dataRcvd:last.scalar-recording = true
**.getSent:last.scalar-recording = true
**.scalar-recording = false

**.rto:vector.vector-recording = true
**.srtt:vector.vector-recording = true
**.effectiveWindow:vector.vector-recording = true
**.rexmit:vector.vector-recording = true
**.dataRcvd:vector.vector-recording = true
**.getSent:vector.vector-recording = true
**.vector-recording = false

[Config for_debug_use_3_node]
description = debug 3 node
sim-time-limit = 60s
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.1

# provider: node[2]
**.host[3].numApps = 1 # ApplicationLayerNodeBase的参数
**.host[3].app[0].typename = "PccpProvider"
**.host[3].app[0].startTime = 1s

# consumer: node[0]
**.host[0].numApps = 1
**.host[0].app[0].typename = "PccpApp"
**.host[0].app[0].RSTpath = "/home/kilotron/data/simu/"
**.host[0].app[0].startTime = 3s # 开始发送请求的时间
**.host[0].app[0].destAddr = 3	# 向node[2]发送请求
**.host[0].app[0].sendInterval = ${appSendInterval=0.1,0.2}
**.host[0].app[0].requestNum = 200

[Config x_static_topo]
description = x static topology
sim-time-limit = 100s
**.colorNet.routeLifeTime = 5s
**.colorNet.getDelayTime = 0.1

smallNETwork.numHosts = 6 # 节点个数
**.host[0].mobility.initialX = -200m 
**.host[0].mobility.initialY = 100m
**.host[1].mobility.initialX = -200m 
**.host[1].mobility.initialY = -100m
**.host[2].mobility.initialX = -100m
**.host[2].mobility.initialY = 0m
**.host[3].mobility.initialX = 100m
**.host[3].mobility.initialY = 0m
**.host[4].mobility.initialX = 200m
**.host[4].mobility.initialY = 100m
**.host[5].mobility.initialX = 200m
**.host[5].mobility.initialY = -100m

# provider: node[4],node[5]
**.host[4].numApps = 1 # ApplicationLayerNodeBase的参数
**.host[4].app[0].typename = "PccpProvider"
**.host[4].app[0].startTime = 1s

**.host[5].numApps = 1
**.host[5].app[0].typename = "PccpProvider"
**.host[5].app[0].startTime = 1s

# consumer: node[0],node[1]
**.host[0].numApps = 1
**.host[0].app[0].typename = "PccpApp"
**.host[0].app[0].startTime = 3s # 开始发送请求的时间
**.host[0].app[0].destAddr = 4	# 向node[4]发送请求
**.host[0].app[0].sendInterval = ${appSendInterval=0.000001, 0.00001, 0.0001, 0.005..0.05 step 0.005}
**.host[0].app[0].requestNum = 10000

**.host[1].numApps = 1
**.host[1].app[0].typename = "PccpApp"
**.host[1].app[0].startTime = 3s # 开始发送请求的时间
**.host[1].app[0].destAddr = 5	# 向node[4]发送请求
**.host[1].app[0].sendInterval = ${appSendInterval2=0.000001, 0.00001, 0.0001, 0.005..0.05 step 0.005!appSendInterval}
**.host[1].app[0].requestNum = 10000
